// Code generated by mockery v2.45.1. DO NOT EDIT.

package startup

import (
	model "github.com/joshmedeski/sesh/model"
	mock "github.com/stretchr/testify/mock"
)

// MockStartup is an autogenerated mock type for the Startup type
type MockStartup struct {
	mock.Mock
}

type MockStartup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStartup) EXPECT() *MockStartup_Expecter {
	return &MockStartup_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: session
func (_m *MockStartup) Exec(session model.SeshSession) (string, error) {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SeshSession) (string, error)); ok {
		return rf(session)
	}
	if rf, ok := ret.Get(0).(func(model.SeshSession) string); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.SeshSession) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStartup_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockStartup_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - session model.SeshSession
func (_e *MockStartup_Expecter) Exec(session interface{}) *MockStartup_Exec_Call {
	return &MockStartup_Exec_Call{Call: _e.mock.On("Exec", session)}
}

func (_c *MockStartup_Exec_Call) Run(run func(session model.SeshSession)) *MockStartup_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.SeshSession))
	})
	return _c
}

func (_c *MockStartup_Exec_Call) Return(_a0 string, _a1 error) *MockStartup_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStartup_Exec_Call) RunAndReturn(run func(model.SeshSession) (string, error)) *MockStartup_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStartup creates a new instance of MockStartup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStartup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStartup {
	mock := &MockStartup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
