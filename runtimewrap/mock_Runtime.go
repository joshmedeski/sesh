// Code generated by mockery v2.43.0. DO NOT EDIT.

package runtimewrap

import mock "github.com/stretchr/testify/mock"

// MockRuntime is an autogenerated mock type for the Runtime type
type MockRuntime struct {
	mock.Mock
}

type MockRuntime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntime) EXPECT() *MockRuntime_Expecter {
	return &MockRuntime_Expecter{mock: &_m.Mock}
}

// GOOS provides a mock function with given fields:
func (_m *MockRuntime) GOOS() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GOOS")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRuntime_GOOS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GOOS'
type MockRuntime_GOOS_Call struct {
	*mock.Call
}

// GOOS is a helper method to define mock.On call
func (_e *MockRuntime_Expecter) GOOS() *MockRuntime_GOOS_Call {
	return &MockRuntime_GOOS_Call{Call: _e.mock.On("GOOS")}
}

func (_c *MockRuntime_GOOS_Call) Run(run func()) *MockRuntime_GOOS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntime_GOOS_Call) Return(_a0 string) *MockRuntime_GOOS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntime_GOOS_Call) RunAndReturn(run func() string) *MockRuntime_GOOS_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntime creates a new instance of MockRuntime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntime {
	mock := &MockRuntime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
