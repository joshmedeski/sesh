// Code generated by mockery v2.45.1. DO NOT EDIT.

package namer

import mock "github.com/stretchr/testify/mock"

// MockNamer is an autogenerated mock type for the Namer type
type MockNamer struct {
	mock.Mock
}

type MockNamer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamer) EXPECT() *MockNamer_Expecter {
	return &MockNamer_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields: path
func (_m *MockNamer) Name(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockNamer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
//   - path string
func (_e *MockNamer_Expecter) Name(path interface{}) *MockNamer_Name_Call {
	return &MockNamer_Name_Call{Call: _e.mock.On("Name", path)}
}

func (_c *MockNamer_Name_Call) Run(run func(path string)) *MockNamer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNamer_Name_Call) Return(_a0 string, _a1 error) *MockNamer_Name_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamer_Name_Call) RunAndReturn(run func(string) (string, error)) *MockNamer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamer creates a new instance of MockNamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamer {
	mock := &MockNamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
