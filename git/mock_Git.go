// Code generated by mockery v2.45.1. DO NOT EDIT.

package git

import mock "github.com/stretchr/testify/mock"

// MockGit is an autogenerated mock type for the Git type
type MockGit struct {
	mock.Mock
}

type MockGit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGit) EXPECT() *MockGit_Expecter {
	return &MockGit_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function with given fields: name
func (_m *MockGit) Clone(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockGit_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - name string
func (_e *MockGit_Expecter) Clone(name interface{}) *MockGit_Clone_Call {
	return &MockGit_Clone_Call{Call: _e.mock.On("Clone", name)}
}

func (_c *MockGit_Clone_Call) Run(run func(name string)) *MockGit_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_Clone_Call) Return(_a0 string, _a1 error) *MockGit_Clone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_Clone_Call) RunAndReturn(run func(string) (string, error)) *MockGit_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// GitCommonDir provides a mock function with given fields: name
func (_m *MockGit) GitCommonDir(name string) (bool, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GitCommonDir")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGit_GitCommonDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitCommonDir'
type MockGit_GitCommonDir_Call struct {
	*mock.Call
}

// GitCommonDir is a helper method to define mock.On call
//   - name string
func (_e *MockGit_Expecter) GitCommonDir(name interface{}) *MockGit_GitCommonDir_Call {
	return &MockGit_GitCommonDir_Call{Call: _e.mock.On("GitCommonDir", name)}
}

func (_c *MockGit_GitCommonDir_Call) Run(run func(name string)) *MockGit_GitCommonDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_GitCommonDir_Call) Return(_a0 bool, _a1 string, _a2 error) *MockGit_GitCommonDir_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGit_GitCommonDir_Call) RunAndReturn(run func(string) (bool, string, error)) *MockGit_GitCommonDir_Call {
	_c.Call.Return(run)
	return _c
}

// ShowTopLevel provides a mock function with given fields: name
func (_m *MockGit) ShowTopLevel(name string) (bool, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ShowTopLevel")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGit_ShowTopLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowTopLevel'
type MockGit_ShowTopLevel_Call struct {
	*mock.Call
}

// ShowTopLevel is a helper method to define mock.On call
//   - name string
func (_e *MockGit_Expecter) ShowTopLevel(name interface{}) *MockGit_ShowTopLevel_Call {
	return &MockGit_ShowTopLevel_Call{Call: _e.mock.On("ShowTopLevel", name)}
}

func (_c *MockGit_ShowTopLevel_Call) Run(run func(name string)) *MockGit_ShowTopLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_ShowTopLevel_Call) Return(_a0 bool, _a1 string, _a2 error) *MockGit_ShowTopLevel_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGit_ShowTopLevel_Call) RunAndReturn(run func(string) (bool, string, error)) *MockGit_ShowTopLevel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGit creates a new instance of MockGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGit {
	mock := &MockGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
