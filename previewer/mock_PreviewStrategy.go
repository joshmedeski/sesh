// Code generated by mockery v2.50.0. DO NOT EDIT.

package previewer

import mock "github.com/stretchr/testify/mock"

// MockPreviewStrategy is an autogenerated mock type for the PreviewStrategy type
type MockPreviewStrategy struct {
	mock.Mock
}

type MockPreviewStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPreviewStrategy) EXPECT() *MockPreviewStrategy_Expecter {
	return &MockPreviewStrategy_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: name
func (_m *MockPreviewStrategy) Execute(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPreviewStrategy_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPreviewStrategy_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - name string
func (_e *MockPreviewStrategy_Expecter) Execute(name interface{}) *MockPreviewStrategy_Execute_Call {
	return &MockPreviewStrategy_Execute_Call{Call: _e.mock.On("Execute", name)}
}

func (_c *MockPreviewStrategy_Execute_Call) Run(run func(name string)) *MockPreviewStrategy_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPreviewStrategy_Execute_Call) Return(_a0 string, _a1 error) *MockPreviewStrategy_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPreviewStrategy_Execute_Call) RunAndReturn(run func(string) (string, error)) *MockPreviewStrategy_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPreviewStrategy creates a new instance of MockPreviewStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPreviewStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPreviewStrategy {
	mock := &MockPreviewStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
