// Code generated by mockery v2.43.0. DO NOT EDIT.

package execwrap

import mock "github.com/stretchr/testify/mock"

// MockExec is an autogenerated mock type for the Exec type
type MockExec struct {
	mock.Mock
}

type MockExec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExec) EXPECT() *MockExec_Expecter {
	return &MockExec_Expecter{mock: &_m.Mock}
}

// Command provides a mock function with given fields: name, args
func (_m *MockExec) Command(name string, args ...string) ExecCmd {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 ExecCmd
	if rf, ok := ret.Get(0).(func(string, ...string) ExecCmd); ok {
		r0 = rf(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ExecCmd)
		}
	}

	return r0
}

// MockExec_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type MockExec_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - name string
//   - args ...string
func (_e *MockExec_Expecter) Command(name interface{}, args ...interface{}) *MockExec_Command_Call {
	return &MockExec_Command_Call{Call: _e.mock.On("Command",
		append([]interface{}{name}, args...)...)}
}

func (_c *MockExec_Command_Call) Run(run func(name string, args ...string)) *MockExec_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockExec_Command_Call) Return(_a0 ExecCmd) *MockExec_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExec_Command_Call) RunAndReturn(run func(string, ...string) ExecCmd) *MockExec_Command_Call {
	_c.Call.Return(run)
	return _c
}

// LookPath provides a mock function with given fields: executable
func (_m *MockExec) LookPath(executable string) (string, error) {
	ret := _m.Called(executable)

	if len(ret) == 0 {
		panic("no return value specified for LookPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(executable)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(executable)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(executable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExec_LookPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookPath'
type MockExec_LookPath_Call struct {
	*mock.Call
}

// LookPath is a helper method to define mock.On call
//   - executable string
func (_e *MockExec_Expecter) LookPath(executable interface{}) *MockExec_LookPath_Call {
	return &MockExec_LookPath_Call{Call: _e.mock.On("LookPath", executable)}
}

func (_c *MockExec_LookPath_Call) Run(run func(executable string)) *MockExec_LookPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExec_LookPath_Call) Return(_a0 string, _a1 error) *MockExec_LookPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExec_LookPath_Call) RunAndReturn(run func(string) (string, error)) *MockExec_LookPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExec creates a new instance of MockExec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExec {
	mock := &MockExec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
